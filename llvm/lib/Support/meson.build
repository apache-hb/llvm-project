
subdir('BLAKE3')

cpp_args = [ '-D_HAS_EXCEPTIONS=0' ]
deps = []

has_werror_global_ctors = cpp.compiles(
  '''
  #include <mutex>
  static std::mutex TestGlobalCtorDtor;
  static std::recursive_mutex TestGlobalCtorDtor2;
  int main() { (void)TestGlobalCtorDtor; (void)TestGlobalCtorDtor2; return 0;}
  ''',
  args : '-Werror=global-constructors',
)

if has_werror_global_ctors
  cpp_args += [ '-Werror=global-constructors' ]
endif

src = [
  'ABIBreak.cpp',
  'AMDGPUMetadata.cpp',
  'APFixedPoint.cpp',
  'APFloat.cpp',
  'APInt.cpp',
  'APSInt.cpp',
  'ARMBuildAttrs.cpp',
  'ARMAttributeParser.cpp',
  'ARMWinEH.cpp',
  'Allocator.cpp',
  'AutoConvert.cpp',
  'Base64.cpp',
  'BalancedPartitioning.cpp',
  'BinaryStreamError.cpp',
  'BinaryStreamReader.cpp',
  'BinaryStreamRef.cpp',
  'BinaryStreamWriter.cpp',
  'BlockFrequency.cpp',
  'BranchProbability.cpp',
  'BuryPointer.cpp',
  'CachePruning.cpp',
  'Caching.cpp',
  'circular_raw_ostream.cpp',
  'Chrono.cpp',
  'COM.cpp',
  'CodeGenCoverage.cpp',
  'CommandLine.cpp',
  'Compression.cpp',
  'CRC.cpp',
  'ConvertUTF.cpp',
  'ConvertEBCDIC.cpp',
  'ConvertUTFWrapper.cpp',
  'CrashRecoveryContext.cpp',
  'CSKYAttributes.cpp',
  'CSKYAttributeParser.cpp',
  'DataExtractor.cpp',
  'Debug.cpp',
  'DebugCounter.cpp',
  'DeltaAlgorithm.cpp',
  'DeltaTree.cpp',
  'DivisionByConstantInfo.cpp',
  'DAGDeltaAlgorithm.cpp',
  'DJB.cpp',
  'DynamicAPInt.cpp',
  'ELFAttributeParser.cpp',
  'ELFAttributes.cpp',
  'Error.cpp',
  'ErrorHandling.cpp',
  'ExponentialBackoff.cpp',
  'ExtensibleRTTI.cpp',
  'FileCollector.cpp',
  'FileUtilities.cpp',
  'FileOutputBuffer.cpp',
  'FloatingPointMode.cpp',
  'FoldingSet.cpp',
  'FormattedStream.cpp',
  'FormatVariadic.cpp',
  'GlobPattern.cpp',
  'GraphWriter.cpp',
  'HexagonAttributeParser.cpp',
  'HexagonAttributes.cpp',
  'InitLLVM.cpp',
  'InstructionCost.cpp',
  'IntEqClasses.cpp',
  'IntervalMap.cpp',
  'JSON.cpp',
  'KnownBits.cpp',
  'LEB128.cpp',
  'LineIterator.cpp',
  'Locale.cpp',
  'LockFileManager.cpp',
  'ManagedStatic.cpp',
  'MathExtras.cpp',
  'MemAlloc.cpp',
  'MemoryBuffer.cpp',
  'MemoryBufferRef.cpp',
  'ModRef.cpp',
  'MD5.cpp',
  'MSP430Attributes.cpp',
  'MSP430AttributeParser.cpp',
  'NativeFormatting.cpp',
  'OptimizedStructLayout.cpp',
  'Optional.cpp',
  'OptionStrCmp.cpp',
  'PGOOptions.cpp',
  'Parallel.cpp',
  'PluginLoader.cpp',
  'PrettyStackTrace.cpp',
  'RandomNumberGenerator.cpp',
  'Regex.cpp',
  'RewriteBuffer.cpp',
  'RewriteRope.cpp',
  'RISCVAttributes.cpp',
  'RISCVAttributeParser.cpp',
  'RISCVISAUtils.cpp',
  'ScaledNumber.cpp',
  'ScopedPrinter.cpp',
  'SHA1.cpp',
  'SHA256.cpp',
  'Signposts.cpp',
  'SipHash.cpp',
  'SlowDynamicAPInt.cpp',
  'SmallPtrSet.cpp',
  'SmallVector.cpp',
  'SourceMgr.cpp',
  'SpecialCaseList.cpp',
  'Statistic.cpp',
  'StringExtras.cpp',
  'StringMap.cpp',
  'StringSaver.cpp',
  'StringRef.cpp',
  'SuffixTreeNode.cpp',
  'SuffixTree.cpp',
  'SystemUtils.cpp',
  'TarWriter.cpp',
  'ThreadPool.cpp',
  'TimeProfiler.cpp',
  'Timer.cpp',
  'ToolOutputFile.cpp',
  'Twine.cpp',
  'TypeSize.cpp',
  'Unicode.cpp',
  'UnicodeCaseFold.cpp',
  'UnicodeNameToCodepoint.cpp',
  'UnicodeNameToCodepointGenerated.cpp',
  'VersionTuple.cpp',
  'VirtualFileSystem.cpp',
  'WithColor.cpp',
  'YAMLParser.cpp',
  'YAMLTraits.cpp',
  'raw_os_ostream.cpp',
  'raw_ostream.cpp',
  'raw_socket_stream.cpp',
  'regcomp.c',
  'regerror.c',
  'regexec.c',
  'regfree.c',
  'regstrlcpy.c',
  'xxhash.cpp',
  'Z3Solver.cpp',

  'Atomic.cpp',
  'DynamicLibrary.cpp',
  'Errno.cpp',
  'Memory.cpp',
  'Path.cpp',
  'Process.cpp',
  'Program.cpp',
  'RWMutex.cpp',
  'Signals.cpp',
  'Threading.cpp',
  'Valgrind.cpp',
  'Watchdog.cpp',
]

if host_machine.system() == 'windows'
  deps += [
    cpp.find_library('psapi'),
    cpp.find_library('shell32'),
    cpp.find_library('ole32'),
    cpp.find_library('uuid'),
    cpp.find_library('advapi32'),
    cpp.find_library('ws2_32'),
    cpp.find_library('ntdll'),
  ]
endif

deps += [
  cpp.find_library('dl', required : false),
  cpp.find_library('rt', required : false),
  llvm_support_blake3_dep,
]

link_args = cpp.get_supported_link_arguments('-delayload:shell32.dll', '-delayload:ole32.dll')

lib_llvm_support = library('LLVMSupport', src,
  cpp_args : cpp_args,
  link_args : link_args,
  include_directories : llvm_inc,
  dependencies : deps,
)

llvm_support_dep = declare_dependency(
  include_directories : llvm_inc,
  link_with : lib_llvm_support,
)

meson.override_dependency('LLVMSupport', llvm_support_dep)
